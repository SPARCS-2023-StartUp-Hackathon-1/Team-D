// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    refresh_token_expires_in Int?
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}



// Logic
model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]

    isFirstLogin Boolean @default(true)
    interestedTags Tag[]
    events        Event[]
}

model Event {
    id            String    @id @default(cuid())

    eventName String 

    totalDonated Int @default(0)

    donations Donation[]

    createdAt DateTime @default(now())
    eventDate DateTime

    userId String
    createdUser User @relation(fields: [userId], references: [id])

    destId String
    destination DonateDestination @relation(fields: [destId], references: [id])
}

model Donation {
    id            String    @id @default(cuid())

    createdAt DateTime @default(now())

    donorName String
    money Int
    color Color
    message String @db.Text

    // TODO: 연락처?

    eventId String
    event Event @relation(fields: [eventId], references: [id])
}

enum Color {
  RED
  BLUE
}

model DonateDestination {
  id            String    @id @default(cuid())

  // 기관-이름
  name String

  // 계좌

  // 링크

  // 소개글

  events Event[]
  tags Tag[]
}

enum Tag {
  ENVIRONMENT
  HUMAN_RIGHTS
  FAMINE
  REFUGEE
  CHILDREN
}

